{% extends 'base.html.twig' %}

{% block body %}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>


{{ form_start(form) }}
    Tags
    {% for tag in form.tags %}
        <div class="col-xs-4">
            {{ form_widget(tag) }}
        </div>
    {% endfor %}
{{ form_end(form) }}

<form method="POST" enctype="multipart/form-data" id="form" onsubmit="send(event)">
    <div style="width:100%;">
        <div class="my-container">
            <video controls controlslist preload="metadata" id="video"></video>
        </div>
    </div>

    <input type="hidden" name="name" value="test">
    <input type="hidden" name="description" value="test">

    <input type="file" name="video" accept="video/*"/>

    <button type="button" onclick="setSnapshot()">Set current as poster</button>

    <div style="width:100%; text-align:center; background-color:#333;">
        <!-- <div class="my-container"> -->
            <canvas id="canvas" style="margin:auto;"></canvas>
        <!-- </div> -->
    </div>

    <button type="button" onclick="setSample()">Set as sample</button>

    <div style="width:100%;">
        <div class="my-container">
            <video muted id="fragmentVideo" autoplay preload="metadata" playsinline="true"></video>
        </div>
    </div>

    <input type="hidden" name="snapshotTimestamp" value="0">
    <input type="hidden" name="sampleStartTimestamp" value="0">

    <div class="mb-3">
        <h5 class="form-label">Tags</h5>
        <input type="text" list="tagList" id="tagsInput" class="form-control">
        <datalist id="tagList">
            {% for tag in tags %}
            <option label="{{ tag.name }}" value="{{ tag.name }}">
            {% endfor %}
        </datalist>
        <div id="selectedTags"></div>
    </div>

    <script defer>
        const tagsInput = document.getElementById('tagsInput');
        const selectedTags = document.getElementById('selectedTags');
        tagsInput.addEventListener('keyup', (e) => {
            let keyCode = e.which ? e.which : e.keyCode;
            if (keyCode != 13) {
                return;
            }

            if (document.querySelectorAll('.tag').length >= 15) {
                alert("There couldn't be more than 15 tags.");
                return;
            }

            let value = e.target.value.toLowerCase();
            if (!document.querySelector(`[data-tag="${value}"]`)) {
                selectedTags.innerHTML += `<div class="tag badge badge-lg fs-6 bg-primary me-2" data-tag="${value}">
                    <input type="hidden" name="tags[]" value="${value}">
                    #${value}
                    <span class="tag-delete" onclick="deleteTag(event)">&times;</span>
                </div>`;
                e.target.value = '';
            }
        })
    </script>

    <!-- <input type="file" name="image" accept="image/png"> -->

    <button type="submit">Send</button>
</form>

<!-- <input type="file" name="test" onchange="test(event)" accept="image/png"> -->

<!-- <div contextmenu="videoMenu">Test</div> -->


<script type="text/javascript" src="https://raw.githubusercontent.com/incubated-geek-cc/video-to-GIF/main/js/GIFEncoder.js"></script>
<script type="text/javascript" src="https://raw.githubusercontent.com/incubated-geek-cc/video-to-GIF/main/js/LZWEncoder.js"></script>
<script type="text/javascript" src="https://raw.githubusercontent.com/incubated-geek-cc/video-to-GIF/main/js/NeuQuant.js"></script>

<script type="text/javascript" src="https://raw.githubusercontent.com/antimatter15/jsgif/master/b64.js"></script>

<script defer>
    let canvas = document.getElementById('canvas');
    let video = document.getElementById('video');
    let image = '';

    function deleteTag(e) {
        e.target.closest('.tag').remove();
    }

    async function send(e) {
        e.preventDefault();
        let formData = new FormData(e.target);
        formData.append('snapshot', dataURItoBlob(canvas.toDataURL('image/png')), 'snapshot.png');

        let response = await fetch('/api/video', {
            method: 'POST',
            body: formData,
        });
    }

    setSnapshot = () => {
        let video = document.getElementById('video');
        let ctx = canvas.getContext('2d');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
    }
        
    function dataURItoBlob(dataURI) {
        const byteString = atob(dataURI.split(",")[1]);
        const mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
    }

    (function Preview_Video() {
        'use strict'
        let URL = window.URL || window.webkitURL;
        let Play_Video = function (event) {
            let file = this.files[0]
            let type = file.type
            let videoNode = document.querySelector('video')
            videoNode.src = URL.createObjectURL(file)
        }
        let inputNode = document.querySelector('input[name="video"]')
        inputNode.addEventListener('change', Play_Video, false)
    })()


    // const originalVideo = document.getElementById("originalVideo");
    const fragmentVideo = document.getElementById("fragmentVideo");













    
    // video.onchange = function(uploadFle) {
    //     let file = inputVideoClipFile.files[0];
    //     let fileName = file.name;
    //     let fileSize = (file.size/1024).toFixed(2);
    //     let fileType = file.type;
    //     let fileredr = new FileReader();
    //     fileredr.onload = function (fle) {
    //         let b64Str = fle.target.result;
    //     }; // end file-reader onload
    //     fileredr.readAsDataURL(file);
    // };

    // let bitmap = document.createElement('canvas');

    // bitmap.setAttribute('id', 'bitmap');
    // bitmap.setAttribute('width', video.videoWidth);
    // bitmap.setAttribute('height', video.videoHeight);

    // const bitmapCtx = bitmap.getContext('2d');

    // const background = () => {
    //     bitmapCtx.fillStyle = '#FFFFFF';
    //     bitmapCtx.fillRect(0, 0, video.videoWidth, video.videoHeight);
    // };

    // const encoder = new GIFEncoder(vidWidth, vidHeight);
    // encoder.setRepeat(0);
    // encoder.setDelay(500);

    // const step = async() => {
    //     let bgStatus = await background();
    //     await new Promise(resolve => {
    //         bitmapCtx.drawImage(inputVideo, 0, 0, vidWidth, vidHeight);
    //         frameB64Str = bitmap.toDataURL();
    //         encoder.addFrame(bitmapCtx);
    //         resolve();
    //     });
    //     window.requestAnimationFrame(step);
    // };

    // inputVideo.addEventListener('play', () => {
    //     encoder.start();
    //     step();
    //     window.requestAnimationFrame(step);
    // });

    // video.addEventListener('ended', () => {
    //     encoder.finish();
    // });

    // let fileType = 'image/gif';
    // let readableStream = encoder.stream();
    // let binary_gif = readableStream.getData();
    // let b64Str = 'data:'+fileType+';base64,'+encode64(binary_gif);

    // let dwnlnk = document.createElement('a');
    // dwnlnk.download = fileName;
    // dwnlnk.innerHTML = `ðŸ’¾ <small>Save</small>`;
    // dwnlnk.className = 'btn btn-outline-dark';
    // dwnlnk.href = b64Str;

    // const startTime = 5; // Start time of the fragment in seconds
    // const endTime = 10; // End time of the fragment in seconds

    // video.currentTime = startTime;
    // video.play();

    // video.currentTime = 1;

    function setSample() {
        fragmentVideo.src = video.src
        fragmentVideo.currentTime = video.currentTime

        setTimeout(() => fragmentVideo.pause(), 3000);
    }

    // video.addEventListener("timeupdate", function() {
    //     if (video.currentTime >= endTime) {
    //         video.pause();
    //         video.currentTime = startTime;

    //         const canvas = document.createElement("canvas");
    //         canvas.width = video.videoWidth;
    //         canvas.height = video.videoHeight;
    //         const ctx = canvas.getContext("2d");
    //         ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    //         const stream = canvas.captureStream();
    //         fragmentVideo.srcObject = stream;
    //         fragmentVideo.play();
    //     }
    // });
</script>

<style>
    /* video {
        height: 100% !important;
        width: calc(var(--aspect-ratio, 1.6) / 100%) !important;
    } */
    /* #container {
        background-repeat: no-repeat;
        background-position: top center;
        background-size: cover;
    } */

    video {
        /* width: 100% !important;
        height: calc(var(--aspect-ratio, .5625) * 100%) !important; */
    } 

    .my-container {
        /* width is set as 100% here. any width can be specified as per requirement */
        width: 100%;
        padding-top: 56.25%;
        height: 0px;
        position: relative;
    }

    video {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }
</style>
{% endblock %}