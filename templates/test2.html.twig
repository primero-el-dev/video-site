{% extends 'base.html.twig' %}

{% block body %}
<!-- <button
  class="btn btn-primary" 
  type="button" 
  data-bs-toggle="offcanvas" 
  data-bs-target="#offcanvasScrolling" 
  aria-controls="offcanvasScrolling"
>
  Enable body scrolling
</button>

<div 
  class="offcanvas offcanvas-start" 
  data-bs-scroll="true" 
  data-bs-backdrop="false" 
  tabindex="-1" 
  id="offcanvasScrolling" 
  aria-labelledby="offcanvasScrollingLabel"
>
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Colored with scrolling</h5>
    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    <p>Try scrolling the rest of the page to see this option in action.</p>
  </div>
</div> -->


<div>
    <div class="row container">
        <button onclick="seek()">Click</button>
        {% for video in videos %}
        <div class="col-md-4">
            <!-- <div style="width:100%;">
                <a href="/video/{{ video.id }}" class="my-container">
                    <video 
                        preload="metadata" 
                        muted
                        playsinline="true"
                        disablepictureinpicture
                        src="/videos/{{ video.videoPath }}" 
                        poster="/images/{{ video.snapshotPath }}" 
                        style="z-index:2"
                    ></video>
                    <img src="/images/{{ video.snapshotPath }}" style="z-index:1">
                </a>
            </div> -->
            <a 
                href="/video/{{ video.id }}" 
                style="display:flex; flex-direction:row; align-items:stretch; width:100%; height:100%; text-decoration:none !important; padding:.5rem;" 
                title="{{ video.name }}"
                class="my-video-container card p-3"
            >
                <div class="my-container" style="display:inline-block; position:relative; flex-basis:50%;">
                    <video 
                        preload="metadata" 
                        muted
                        playsinline="true"
                        disablepictureinpicture
                        src="/videos/{{ video.videoPath }}" 
                        poster="/images/{{ video.snapshotPath }}"
                    ></video>
                    <small class="video-duration" style="position:absolute; bottom:0; right:0; background-color:black; padding:.25rem .5rem; color:#eee;"></small>
                </div>
                <div style="display:inline-block; flex-basis:50%; padding:1rem; color:black;">
                    <h5 class="d-block mb-0">{{ video.name }}</h5>
                    <!-- <button class="btn btn-sm btn-primary">Edit</button>
                    <button class="btn btn-sm btn-danger">Delete</button> -->
                    <small class="d-block mb-2">{{ video.createdAt.format('Y-m-d') }}</small>
                    <small class="d-block mb-2">{{ video.owner.email }}</small>
                    <p>{{ video.description[:100] }}</p>
                </div>
            </a>
        </div>
        {% endfor %}
    </div>
</div>

<script defer>
    // let videos = await fetch('/api/video');
    let videoContainer = document.querySelector('.my-video-container');
    let video = videoContainer.querySelector('video');
    let hoverTimeoutId;
    let timeoutId;

    video.addEventListener('loadedmetadata', function() {
        this.currentTime = 30;
        const addTrailingZero = v => v < 10 ? `0${v}` : v;
        let time = parseInt(this.duration / 3600)
            + ':' + addTrailingZero(parseInt(this.duration / 60) % 60)
            + ':' + addTrailingZero(parseInt(this.duration) % 60);
        videoContainer.querySelector('.video-duration').innerHTML = time;
    });

    videoContainer.addEventListener('mouseenter', function() {
        hoverTimeoutId = setTimeout(() => {
            video.play();
            video.currentTime = 5;
            timeoutId = setTimeout(() => {
                video.pause();
                video.currentTime = 30;
            }, 4000);
        }, 1000);
    });

    videoContainer.addEventListener('mouseout', function() {
        window.clearTimeout(hoverTimeoutId);
        window.clearTimeout(timeoutId);
        video.pause();
        video.currentTime = 30;
    });

    // container.addEventListener('mouseenter', function() {
    //     hoverTimeoutId = setTimeout(() => {
    //         console.log('enter')
    //         video.style = 'z-index:2';
    //         poster.style = 'z-index:1';
    //         video.play();
    //         video.currentTime = 5;
    //         timeoutId = setTimeout(() => {
    //             video.pause();
    //             video.style = 'z-index:1';
    //             poster.style = 'z-index:2';
    //         }, 4000);
    //     }, 1000);
    // });

    // container.addEventListener('mouseout', function() {
    //     console.log('exit')
    //     video.style = 'z-index:1';
    //     poster.style = 'z-index:2';
    //     window.clearTimeout(timeoutId);
    //     window.clearTimeout(hoverTimeoutId);
    //     video.pause();
    // });
</script>

<style>
    .my-container {
        /* width is set as 100% here. any width can be specified as per requirement */
        display: block;
        width: 50%;
        padding-top: 56.25%;
        height: 0px;
        position: relative;
        background-color: #333;
    }

    video {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

    img {
        margin: auto;
        height: 100%;
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
    }
</style>
{% endblock %}